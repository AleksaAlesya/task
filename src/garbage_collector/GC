Этот процесс запускается автоматически Java, и Java решает, запускать или нет этот процесс.

На самом деле это дорогостоящий процесс. При запуске сборщика мусора все потоки в вашем приложении приостанавливаются (в зависимости от типа GC, который будет обсуждаться позже).

На самом деле это более сложный процесс, чем просто сбор мусора и освобождение памяти.

System.gc() - просим запустить ГК, но не факт, что запустится, этот метод не рекомендуется исп

1.Когда объект создается, он размещается в пространстве Eden (1).
2.Если объект выживает в процессе сборки мусора, он перемещается в так называемое пространство выжившего S0(2).

3 Во второй раз, когда сборщик мусора запускается в пространстве Eden, он перемещает все уцелевшие объекты в пространство S1(3). Кроме того, все, что в настоящее время находится на S0(2), перемещается в пространство S1(3).

4. Если объект выживает в течение X раундов сборки мусора (X зависит от реализации JVM, в моем случае это 8), скорее всего, он выживет вечно и перемещается в пространство Old(4).

Типы сборщиков мусора
1. Serial GC (Последовательный сборщик мусора)
 2. Parallel GC (Параллельный сборщик мусора)
 3. Mostly concurrent GC (В основном параллельный сборщик мусора).

 Советы и приемы
 1.Чтобы минимизировать объем памяти, максимально ограничьте область видимости переменных.
 2. Явно устанавливайте в null устаревшие ссылки
 3.Избегайте финализаторов (finalizer) - ничего не гарантируют и замедляют процесс
 4.Не используйте сильные ссылки там, где можно применить слабые или мягкие ссылки
 5.JVisualVM (плагин) также имеет функцию создания дампа кучи в определенный момент, чтобы вы могли анализировать для каждого класса, сколько памяти он занимает.
 6.Настройте JVM в соответствии с требованиями вашего приложения. Явно укажите размер кучи для JVM при запуске приложения. Это дорогостоящий процесс, указывать, когда точно знаешшь необходимый размер
 7.Если приложение Java выдает ошибку OutOfMemoryErrorи вам нужна дополнительная информация для обнаружения утечки, запустите процесс с –XX:HeapDumpOnOutOfMemoryпараметром, который создаст файл дампа кучи, когда эта ошибка произойдет в следующий раз.
 8.Используйте опцию -verbose:gc, чтобы получить вывод процесса сборки мусора. Каждый раз, когда происходит сборка мусора, будет генерироваться вывод.