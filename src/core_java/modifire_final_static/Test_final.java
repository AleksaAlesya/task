package core_java.modifire_final_static;

public class Test_final {
    public final int a;
    // если сразу не присваиваем значение, то необходимо в конструкторе это сделать
    public final int b=5;
    // после этого мы уже не можем ее менять, и добавлять в конструуктор

    public Test_final(int a) {
        this.a = a;
    }

    public Test_final() {
        this.a = 15;
    }

    public final String str = new String("ghbdtn");

    public static void main(String[] args) {
        final int[] array = {1,2,3,4,5};
        array[0] = 9;	//ок, т.к. изменяем содержимое массива – {9,2,3,4,5}

//       array = new int[5]; // нельзя т.к. мы меняем сслыку

    }

//    Если переменную   объявили final
// – то обязательно должны  при инициализации присвоить значение
//    или сделать это в конструкторе
//
//    если переменую использовли в  стриме, то она является эффективно финальной и не м. б. изменена

//    Метод final не м. б. переопределен

//    Класс final – не может быть наследован, абстрактный класс не может быть final

//    Для ссылочных переменных  final означает, что после присвоения объекта, нельзя изменить ссылку на данный объект. Это важно! но состояние объекта изменять можно. (т.е данные можно поменять) через сеттер например


//    Static
//    переменные и метод стат. – принадлежат классу  и м. б. вызваны без создания объекта класса
//    в статическом методе можно использ. только статич. перемен.
//    в нестатич. методе можно исп. и статич. и нестатич. перем
//
//    Если переменная static final – то значение надо сразу присваивать, это КОНСТАНТА



}
